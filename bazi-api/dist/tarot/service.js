"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.drawCards = drawCards;
const spreads_1 = require("./spreads");
const i18n_1 = require("./i18n");
const rng_1 = require("./rng");
const donate_1 = require("./donate");
// Í∏àÏßÄÏñ¥ Î™©Î°ù (Ï§ëÎ≥µ Î∞©ÏßÄ)
const FORBIDDEN_WORDS = ['Í∑†Ìòï', 'Ïú†ÏßÄ', 'Î∞úÏ†Ñ', 'ÏÑ±Í≥µÏ†Å', 'Ï°∞Ìôî', 'balance', 'maintain', 'develop', 'successful', 'harmony'];
// ÌñâÎèô Ïπ¥ÌÖåÍ≥†Î¶¨
const ACTION_CATEGORIES = [
    'Ïó∞Ïï†/Í¥ÄÍ≥Ñ', 'Ïùº/ÏßÅÏóÖ', 'Ïû¨Ï†ï/Îèà', 'Í±¥Í∞ï/Ïö¥Îèô', 'ÌïôÏäµ/ÏÑ±Ïû•', 'Ï∞ΩÏûë/ÏòàÏà†', 'Ïó¨Ìñâ/Î™®Ìóò', 'Ï†ïÏã†/ÏòÅÏÑ±'
];
// ÌñâÎèô ÌíÄ (ÎèôÏÇ¨Î°ú ÏãúÏûëÌïòÎäî Íµ¨Ï≤¥Ï†Å ÌñâÎèôÎì§)
const ACTION_POOL = [
    'ÏÉàÎ°úÏö¥ ÏÇ¨ÎûåÍ≥º ÎåÄÌôîÎ•º ÏãúÏûëÌïòÏÑ∏Ïöî',
    'Ïò§Îäò Ìïú Í∞ÄÏßÄ ÏÉàÎ°úÏö¥ Í≤ÉÏùÑ Î∞∞Ïö∞ÏÑ∏Ïöî',
    '30Î∂Ñ Ïù¥ÏÉÅ Í±∑Í∏∞Î°ú ÏóêÎÑàÏßÄÎ•º Ï∂©Ï†ÑÌïòÏÑ∏Ïöî',
    'Ï∞ΩÏùòÏ†ÅÏù∏ ÏïÑÏù¥ÎîîÏñ¥Î•º Î©îÎ™®Ìï¥Î≥¥ÏÑ∏Ïöî',
    'Í∞êÏÇ¨Ìïú Ïùº 3Í∞ÄÏßÄÎ•º Ï†ÅÏñ¥Î≥¥ÏÑ∏Ïöî',
    'Ïò§ÎûòÎêú ÏäµÍ¥Ä ÌïòÎÇòÎ•º Î∞îÍøîÎ≥¥ÏÑ∏Ïöî',
    'ÏûêÏó∞ ÏÜçÏóêÏÑú ÏãúÍ∞ÑÏùÑ Î≥¥ÎÇ¥Î≥¥ÏÑ∏Ïöî',
    'ÏßÑÏã¨ÏúºÎ°ú ÏõÉÏùÑ Ïàò ÏûàÎäî ÏùºÏùÑ Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî',
    'ÎèÑÏ†ÑÏ†ÅÏù∏ Î™©ÌëúÎ•º ÏÑ∏ÏõåÎ≥¥ÏÑ∏Ïöî',
    'ÎßàÏùåÏùò ÌèâÌôîÎ•º ÏúÑÌïú Î™ÖÏÉÅÏùÑ Ìï¥Î≥¥ÏÑ∏Ïöî',
    'ÏÉàÎ°úÏö¥ Ï∑®ÎØ∏Î•º ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî',
    'ÏÜåÏ§ëÌïú ÏÇ¨ÎûåÏóêÍ≤å Í∞êÏÇ¨ Ïù∏ÏÇ¨Î•º Ï†ÑÌïòÏÑ∏Ïöî',
    'Ï∞ΩÏùòÏ†ÅÏù∏ ÌîÑÎ°úÏ†ùÌä∏Î•º ÏãúÏûëÌï¥Î≥¥ÏÑ∏Ïöî',
    'Í±¥Í∞ïÌïú ÏùåÏãùÏùÑ Ìïú ÎÅº Îçî Î®πÏñ¥Î≥¥ÏÑ∏Ïöî',
    'Ïò§ÎûòÎêú ÍøàÏùÑ Îã§Ïãú ÏÉùÍ∞ÅÌï¥Î≥¥ÏÑ∏Ïöî'
];
// Ï£ºÏùòÏÇ¨Ìï≠ ÌíÄ
const CAUTIONS = [
    'Í≤∞Í≥ºÎäî Ï∞∏Í≥†Ïö©Ïù¥Î©∞, ÏµúÏ¢Ö ÌåêÎã®ÏùÄ Î≥∏Ïù∏Ïùò ÌåêÎã®Ïóê Îß°Í∏∞ÏÑ∏Ïöî',
    'Ïπ¥ÎìúÏùò ÏùòÎØ∏Îäî ÏÉÅÌô©Ïóê Îî∞Îùº Îã§Î•¥Í≤å Ìï¥ÏÑùÎê† Ïàò ÏûàÏäµÎãàÎã§',
    'Í∏çÏ†ïÏ†ÅÏù∏ ÎßàÏùåÍ∞ÄÏßêÏúºÎ°ú Í≤∞Í≥ºÎ•º Î∞õÏïÑÎì§Ïù¥ÏÑ∏Ïöî',
    'Ïπ¥ÎìúÎäî Î∞©Ìñ•ÏùÑ Ï†úÏãúÌï† Îøê, ÏÑ†ÌÉùÏùÄ Î≥∏Ïù∏Ïùò Î™´ÏûÖÎãàÎã§',
    'Î≥ÄÌôîÎ•º ÎëêÎ†§ÏõåÌïòÏßÄ ÎßêÍ≥† ÏÉàÎ°úÏö¥ Í∏∞ÌöåÎ•º Ìè¨Ï∞©ÌïòÏÑ∏Ïöî'
];
// ÏïÑÌÇ§ÌÉÄÏûÖ ÏÉùÏÑ±
function generateArchetype(cards) {
    const keywords = cards.flatMap(card => card.meaning.split(' '));
    const positiveWords = keywords.filter(word => ['ÏÉàÎ°úÏö¥', 'Ï∞ΩÏ°∞', 'Ìù¨Îßù', 'ÏÑ±Í≥µ', 'ÌñâÎ≥µ', 'ÏûêÏú†', 'ÏßÄÌòú', 'Ïö©Í∏∞'].includes(word));
    if (positiveWords.length > 2) {
        return 'Í∞úÏ≤ôÏûê üöÄ';
    }
    else if (cards.some(card => card.meaning.includes('ÏßÄÌòú'))) {
        return 'ÌòÑÏûê üìö';
    }
    else if (cards.some(card => card.meaning.includes('ÏÇ¨Îûë'))) {
        return 'Ïó∞Ïù∏ üíï';
    }
    else {
        return 'ÌÉêÌóòÍ∞Ä üîç';
    }
}
// ÏöîÏïΩ ÏÉùÏÑ±
function generateSummary(cards, question) {
    const archetype = generateArchetype(cards);
    const cardMeanings = cards.map(card => card.meaning);
    const summary = [
        `${archetype}Ïùò ÏóêÎÑàÏßÄÍ∞Ä ÎãπÏã†ÏùÑ Ïù¥ÎÅåÍ≥† ÏûàÏäµÎãàÎã§.`,
        question ? `"${question}"Ïóê ÎåÄÌïú ÎãµÏùÄ ${cardMeanings.join(' ')}ÏûÖÎãàÎã§.` : `Ïπ¥ÎìúÎì§Ïù¥ ${cardMeanings.join(' ')}Î•º Î≥¥Ïó¨Ï§çÎãàÎã§.`,
        'Ïò§Îäò ÌïòÎ£®Î•º ÏùòÎØ∏ ÏûàÍ≤å ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî.'
    ];
    return summary;
}
// ÌñâÎèô 3Í∞ÄÏßÄ ÏÉùÏÑ±
function generateActions(seedStr) {
    const shuffledActions = (0, rng_1.seededShuffle)(ACTION_POOL, seedStr + 'actions');
    const selectedActions = [];
    for (const action of shuffledActions) {
        if (selectedActions.length >= 3)
            break;
        // Ï§ëÎ≥µ Î∞©ÏßÄ
        const isDuplicate = selectedActions.some(selected => selected.split(' ').slice(0, 3).join(' ') === action.split(' ').slice(0, 3).join(' '));
        if (!isDuplicate) {
            selectedActions.push(action);
        }
    }
    return selectedActions;
}
// Ï£ºÏùòÏÇ¨Ìï≠ ÏÉùÏÑ±
function generateCaution(seedStr) {
    const cautions = (0, rng_1.seededShuffle)(CAUTIONS, seedStr + 'caution');
    return cautions[0] || CAUTIONS[0];
}
// Ïπ¥Îìú ÏùòÎØ∏ Ï°∞Ìï©
function combineCardMeaning(card, orientation, position) {
    const meaning = orientation === 'upright' ? card.upright.short : card.reversed.short;
    const positionText = position ? `(${position}) ` : '';
    return `${positionText}${meaning}`;
}
// Î©îÏù∏ ÏÑúÎπÑÏä§ Ìï®Ïàò
async function drawCards(request) {
    try {
        const { spread, question, lang = 'ko', userId = 'anonymous', seed } = request;
        // ÏãúÎìú ÏÉùÏÑ±
        const today = new Date().toISOString().split('T')[0];
        const seedStr = seed || `${userId}|${lang}|${question || 'daily'}|${today}`;
        // Îç± Î°úÎî©
        const deck = (0, i18n_1.loadDeck)(lang);
        if (deck.length === 0) {
            throw new Error('Failed to load tarot deck');
        }
        // Ïä§ÌîÑÎ†àÎìú Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        const spreadInfo = spreads_1.SPREADS[spread];
        if (!spreadInfo) {
            throw new Error('Invalid spread type');
        }
        // Ïπ¥Îìú ÏÖîÌîå Î∞è ÏÑ†ÌÉù
        const shuffledDeck = (0, rng_1.seededShuffle)(deck, seedStr + 'deck');
        const selectedCards = shuffledDeck.slice(0, spreadInfo.length);
        // Ïπ¥Îìú Ï†ïÎ≥¥ Íµ¨ÏÑ±
        const cards = selectedCards.map((card, index) => {
            const orientation = (0, rng_1.pickOrientation)(seedStr + 'orientation', index);
            const position = spreadInfo[index]?.name;
            return {
                id: card.id,
                name: card.name,
                orientation,
                position,
                meaning: combineCardMeaning(card, orientation, position)
            };
        });
        // ÏöîÏïΩ ÏÉùÏÑ±
        const summary = {
            archetype: generateArchetype(cards),
            summary: generateSummary(cards, question),
            actions: generateActions(seedStr),
            caution: generateCaution(seedStr)
        };
        // ÎèÑÎÑ§Ïù¥ÏÖò Ï†ïÎ≥¥
        const donation = (0, donate_1.getDonationInfo)();
        return {
            success: true,
            result: {
                spread,
                question,
                lang,
                cards,
                summary,
                donation
            }
        };
    }
    catch (error) {
        console.error('Error in drawCards:', error);
        return {
            success: false,
            error: error instanceof Error ? error.message : 'Unknown error occurred'
        };
    }
}
//# sourceMappingURL=service.js.map